from db.mongo_db import db




# For logging
import logging
logger = logging.getLogger(__name__)

async def upload_on_mongodb(patient_id: str, call_id, new_chats: list) -> int:
    """
    Appends new chat items to a dynamic field (named by call_id) in the document 
    associated with a given patient_id.
    
    If a document with the provided patient_id doesn't exist, a new document is created 
    with:
      - A random _id automatically generated by MongoDB (an ObjectId)
      - A "patient_id" attribute set to the provided patient_id
    
    Args:
        patient_id (str): The patient identifier (stored as an attribute, not as _id).
        call_id: The identifier used as the field name to store chats.
        new_chats (list): A list of new chat items to append.
        
    Returns:
        int: The number of modified documents.
    """
    try:
        # Filter using patient_id (do not convert it to an ObjectId)
        filter_query = {"patient_id": patient_id}
        
        # Update query: push new chats into the dynamic field, and if the document doesn't exist,
        # set the patient_id attribute.
        update_query = {
            "$push": {str(call_id): {"$each": new_chats}},
            "$setOnInsert": {"patient_id": patient_id}
        }
    
        # Use upsert=True so that a new document is created if none exists.
        result = await db.chats.update_one(filter_query, update_query, upsert=True)
        logger.info("Data uploaded successfully for patient_id: %s, call_id: %s", patient_id, str(call_id))
        return result.modified_count
    except Exception as e:
        logger.error("Error in upload_on_mongodb: %s", str(e))
        raise

async def get_document_by_patient_id(patient_id: str) -> dict:
    """
    Retrieves a document from the 'chats' collection using the patient_id attribute.
    
    Args:
        patient_id (str): The patient identifier.
        
    Returns:
        dict: The document as a dictionary, or None if not found.
    """
    try:
        # Query by the patient_id attribute
        document = await db.chats.find_one({"patient_id": patient_id})
        if document:
            logger.info("Document retrieved successfully for patient_id: %s", patient_id)
        else:
            logger.info("No document found for patient_id: %s", patient_id)
        return document
    except Exception as e:
        logger.error("Error retrieving document for patient_id %s: %s", patient_id, str(e))
        raise